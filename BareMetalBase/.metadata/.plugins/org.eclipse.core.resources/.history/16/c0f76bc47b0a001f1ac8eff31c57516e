#include <stdio.h>
#include "stm32f4xx.h"

#define GPIOAEN				(1U << 0)
#define UART2EN 			(1U << 17)

#define SYS_FREQ			16000000
#define APB1_CLK			SYS_FREQ
#define BAUD_RATE			115200

#define CR1_TE				(1U << 3)
#define CR1_UE				(1U << 13)

#define SR_TXE				(1U << 7)

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_tx_init(void);
void uart2_write(int ch);

int main(void)
{
	uart2_tx_init();

	while(1)
	{
		uart2_write('Y');
	}
}

// UART2 Tx is pin PA2 set to AF07 mode
void uart2_tx_init(void)
{
	/******************* Configure UART GPIO pin ***********************/
	// Enable clock access to GPIOA on AHB1
	RCC->AHB1ENR |= GPIOAEN;

	// Set PA2 to alternate function mode. MODER bits 5:4 = 0b10
	GPIOA->MODER &= ~(1U << 4);
	GPIOA->MODER |= (1U << 5);

	// Set PA2 AF mode type to UART_TX (AF07). Bits 11:8 of AFRL2 = 0b0111
	GPIOA->AFR[0] &= ~(1U << 11);
	GPIOA->AFR[0] |= (1U << 10);
	GPIOA->AFR[0] |= (1U << 9);
	GPIOA->AFR[0] |= (1U << 8);

	/******************* Configure UART module ***********************/
	// Configure clock access to UART2
	RCC->APB1ENR |= UART2EN;

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, BAUD_RATE);

	// Configure transfer direction and register defaults as well (8 data bits, 1 stop bit, parity 0...)
	USART2->CR1 = CR1_TE;

	// Enable UART module
	USART2->CR1 |= CR1_UE;

}

void uart2_write(int ch)
{
	// Make sure the transmit data register is empty: check the USART status register TXE bit
	while(!(USART2->SR & SR_TXE)){}

	// Write to the transmit data register
	USART2->DR |= ch & 0xFF;

}



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);

}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate/2U)/BaudRate));
}
