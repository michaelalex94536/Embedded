
10_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011cc  080011cc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080011cc  080011cc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011cc  080011cc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011d0  080011d0  000111d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080011d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000064  08001238  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001238  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d06  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000399  00000000  00000000  00020d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00021138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00021208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e4e  00000000  00000000  000212a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012c8  00000000  00000000  000230ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe37  00000000  00000000  000243b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b41ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000604  00000000  00000000  000b4240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800114c 	.word	0x0800114c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800114c 	.word	0x0800114c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
extern char uart_data_buffer[UART_DATA_BUF_SIZE];

char msg_buff[120] = {'\0'};

int main(void)
{
 80002c0:	b598      	push	{r3, r4, r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	uart2_rx_tx_init();
 80002c4:	f000 f89a 	bl	80003fc <uart2_rx_tx_init>
	dma1_init();
 80002c8:	f000 f918 	bl	80004fc <dma1_init>
	dma1_stream5_uart_rx_config();
 80002cc:	f000 f926 	bl	800051c <dma1_stream5_uart_rx_config>
	sprintf(msg_buff, "Initialization complete\n\r");
 80002d0:	4919      	ldr	r1, [pc, #100]	; (8000338 <main+0x78>)
 80002d2:	481a      	ldr	r0, [pc, #104]	; (800033c <main+0x7c>)
 80002d4:	f000 facc 	bl	8000870 <siprintf>

	dma1_stream6_uart_tx_config((uint32_t)msg_buff, strlen(msg_buff));
 80002d8:	4c18      	ldr	r4, [pc, #96]	; (800033c <main+0x7c>)
 80002da:	4818      	ldr	r0, [pc, #96]	; (800033c <main+0x7c>)
 80002dc:	f7ff ff98 	bl	8000210 <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4620      	mov	r0, r4
 80002e6:	f000 f98d 	bl	8000604 <dma1_stream6_uart_tx_config>

	while(!g_tx_cmplt){}
 80002ea:	bf00      	nop
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <main+0x80>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0fb      	beq.n	80002ec <main+0x2c>

	while(1)
	{
		if(g_rx_cmplt)
 80002f4:	4b13      	ldr	r3, [pc, #76]	; (8000344 <main+0x84>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0fb      	beq.n	80002f4 <main+0x34>
		{
			sprintf(msg_buff,"Message received: %s \r\n",uart_data_buffer);
 80002fc:	4a12      	ldr	r2, [pc, #72]	; (8000348 <main+0x88>)
 80002fe:	4913      	ldr	r1, [pc, #76]	; (800034c <main+0x8c>)
 8000300:	480e      	ldr	r0, [pc, #56]	; (800033c <main+0x7c>)
 8000302:	f000 fab5 	bl	8000870 <siprintf>
			g_rx_cmplt = 0;
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <main+0x84>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
			g_tx_cmplt = 0;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <main+0x80>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
			g_uart_cmplt = 0;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <main+0x90>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]

			dma1_stream6_uart_tx_config((uint32_t)msg_buff, strlen(msg_buff));
 8000318:	4c08      	ldr	r4, [pc, #32]	; (800033c <main+0x7c>)
 800031a:	4808      	ldr	r0, [pc, #32]	; (800033c <main+0x7c>)
 800031c:	f7ff ff78 	bl	8000210 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	4619      	mov	r1, r3
 8000324:	4620      	mov	r0, r4
 8000326:	f000 f96d 	bl	8000604 <dma1_stream6_uart_tx_config>

			while(!g_tx_cmplt){}
 800032a:	bf00      	nop
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <main+0x80>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0fb      	beq.n	800032c <main+0x6c>
		if(g_rx_cmplt)
 8000334:	e7de      	b.n	80002f4 <main+0x34>
 8000336:	bf00      	nop
 8000338:	08001164 	.word	0x08001164
 800033c:	20000080 	.word	0x20000080
 8000340:	20000102 	.word	0x20000102
 8000344:	20000101 	.word	0x20000101
 8000348:	200000fc 	.word	0x200000fc
 800034c:	08001180 	.word	0x08001180
 8000350:	20000103 	.word	0x20000103

08000354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <_sbrk+0x5c>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <_sbrk+0x60>)
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <_sbrk+0x64>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_sbrk+0x64>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <_sbrk+0x68>)
 8000374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d207      	bcs.n	8000394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000384:	f000 fa4a 	bl	800081c <__errno>
 8000388:	4603      	mov	r3, r0
 800038a:	220c      	movs	r2, #12
 800038c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000392:	e009      	b.n	80003a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_sbrk+0x64>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <_sbrk+0x64>)
 80003a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003a6:	68fb      	ldr	r3, [r7, #12]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20020000 	.word	0x20020000
 80003b4:	00000400 	.word	0x00000400
 80003b8:	200000f8 	.word	0x200000f8
 80003bc:	20000118 	.word	0x20000118

080003c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db0b      	blt.n	80003ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 021f 	and.w	r2, r3, #31
 80003d8:	4907      	ldr	r1, [pc, #28]	; (80003f8 <__NVIC_EnableIRQ+0x38>)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	095b      	lsrs	r3, r3, #5
 80003e0:	2001      	movs	r0, #1
 80003e2:	fa00 f202 	lsl.w	r2, r0, r2
 80003e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e100 	.word	0xe000e100

080003fc <uart2_rx_tx_init>:
uint8_t g_tx_cmplt;
uint8_t g_uart_cmplt;


void uart2_rx_tx_init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	/*********************  Configure UART GPIO pin ********************/
	// 1) Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000400:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <uart2_rx_tx_init+0xf0>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a39      	ldr	r2, [pc, #228]	; (80004ec <uart2_rx_tx_init+0xf0>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6313      	str	r3, [r2, #48]	; 0x30

	// 2) Set PA2 to alternate function (AF) mode
	GPIOA->MODER &= ~(1U << 4);  // Set bit 4 to 0
 800040c:	4b38      	ldr	r3, [pc, #224]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a37      	ldr	r2, [pc, #220]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000412:	f023 0310 	bic.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);   // Set bit 5 to 1
 8000418:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a34      	ldr	r2, [pc, #208]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6013      	str	r3, [r2, #0]

	// 3) Set PA3 to alternate function (AF) mode
	GPIOA->MODER &= ~(1U << 6);  // Set bit 6 to 0
 8000424:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a31      	ldr	r2, [pc, #196]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800042a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);   // Set bit 7 to 1
 8000430:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043a:	6013      	str	r3, [r2, #0]

	// 4) Set PA2 alternate function type to AF7 (USART2_TX)
	GPIOA->AFR[0] |= (1U << 8);
 800043c:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a2b      	ldr	r2, [pc, #172]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000446:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 8000448:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a28      	ldr	r2, [pc, #160]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800044e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000452:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 8000454:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	4a25      	ldr	r2, [pc, #148]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800045a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 8000460:	4b23      	ldr	r3, [pc, #140]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a22      	ldr	r2, [pc, #136]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800046a:	6213      	str	r3, [r2, #32]

	// 5) Set PA3 alternate function type to AF7 (USART2_RX)
	GPIOA->AFR[0] |= (1U << 12);
 800046c:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000476:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);
 8000478:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800047e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000482:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 800048a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 15);
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <uart2_rx_tx_init+0xf4>)
 8000496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800049a:	6213      	str	r3, [r2, #32]

	/*******************  Configure UART module  *********************/
	// 6) Enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <uart2_rx_tx_init+0xf0>)
 800049e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a0:	4a12      	ldr	r2, [pc, #72]	; (80004ec <uart2_rx_tx_init+0xf0>)
 80004a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a6:	6413      	str	r3, [r2, #64]	; 0x40

	// 7) Set baudrate
	uart_set_baudrate(CLK, UART_BAUDRATE);
 80004a8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80004ac:	4811      	ldr	r0, [pc, #68]	; (80004f4 <uart2_rx_tx_init+0xf8>)
 80004ae:	f000 f92f 	bl	8000710 <uart_set_baudrate>

	// 8) Specify using DMA for both Rx and Tx and reset all other bits in CR3
	USART2->CR3 = (CR3_DMAR | CR3_DMAT);
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004b4:	22c0      	movs	r2, #192	; 0xc0
 80004b6:	615a      	str	r2, [r3, #20]

	// 9) Set transfer direction to both Rx and Tx
	USART2->CR1 = (CR1_TE | CR1_RE);
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	60da      	str	r2, [r3, #12]

	//10) Clear TC (transfer complete) flag
	USART2->SR &= ~SR_TC;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c8:	6013      	str	r3, [r2, #0]

	//11) Enable TCIE (transfer complete interrupt)
	USART2->CR1 |= CR1_TCIE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d4:	60d3      	str	r3, [r2, #12]

	//12) Enable UART module
	USART2->CR1 |= CR1_UE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <uart2_rx_tx_init+0xfc>)
 80004dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004e0:	60d3      	str	r3, [r2, #12]

	/*13.Enable USART2 interrupt in the NVIC*/
	 NVIC_EnableIRQ(USART2_IRQn);
 80004e2:	2026      	movs	r0, #38	; 0x26
 80004e4:	f7ff ff6c 	bl	80003c0 <__NVIC_EnableIRQ>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020000 	.word	0x40020000
 80004f4:	00f42400 	.word	0x00f42400
 80004f8:	40004400 	.word	0x40004400

080004fc <dma1_init>:

void dma1_init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	// Enable clock access to DMA1 on AHB1
	RCC->AHB1ENR |= DMA1EN;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <dma1_init+0x1c>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <dma1_init+0x1c>)
 8000506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800050a:	6313      	str	r3, [r2, #48]	; 0x30

	// Enable DMA stream 6 interrupt in NVIC
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800050c:	2011      	movs	r0, #17
 800050e:	f7ff ff57 	bl	80003c0 <__NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <dma1_stream5_uart_rx_config>:

void dma1_stream5_uart_rx_config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	// Disable DMA stream
	DMA1_Stream5->CR &= ~DMA_SCR_EN;
 8000520:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000526:	f023 0301 	bic.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]

	// Wait until DMA is disabled
	while((DMA1_Stream5->CR & ~DMA_SCR_EN)){}
 800052c:	bf00      	nop
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f023 0301 	bic.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f9      	bne.n	800052e <dma1_stream5_uart_rx_config+0x12>

	// Clear interrupt flags for stream 5
	DMA1->HIFCR |= HIFCR_CDMEIF5;
 800053a:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 8000540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000544:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= HIFCR_CTEIF5;
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	4a2b      	ldr	r2, [pc, #172]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 800054c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000550:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= HIFCR_CHTIF5;
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 8000558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055c:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= HIFCR_CTCIF5;
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	4a25      	ldr	r2, [pc, #148]	; (80005f8 <dma1_stream5_uart_rx_config+0xdc>)
 8000564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000568:	60d3      	str	r3, [r2, #12]

	// Set peripheral address
	DMA1_Stream5->PAR = (uint32_t)(&(USART2->DR));
 800056a:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 800056c:	4a23      	ldr	r2, [pc, #140]	; (80005fc <dma1_stream5_uart_rx_config+0xe0>)
 800056e:	609a      	str	r2, [r3, #8]

	// Set memory address
	DMA1_Stream5->M0AR = (uint32_t)(&uart_data_buffer);
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000572:	4a23      	ldr	r2, [pc, #140]	; (8000600 <dma1_stream5_uart_rx_config+0xe4>)
 8000574:	60da      	str	r2, [r3, #12]

	// Set number of transfers
	DMA1_Stream5->NDTR = (uint16_t)UART_DATA_BUF_SIZE;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000578:	2205      	movs	r2, #5
 800057a:	605a      	str	r2, [r3, #4]

	// Select Channel 4
	DMA1_Stream5->CR &= ~(1U << 25);
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000582:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000586:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &= ~(1U << 26);
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 800058e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000592:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR |= (1U << 27);
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 800059a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800059e:	6013      	str	r3, [r2, #0]

	// Enable memory address increment
	DMA1_Stream5->CR |= DMA_SCR_MINC;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]

	// Enable transfer complete interrupt
	DMA1_Stream5->CR |= DMA_SCR_TCIE;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6013      	str	r3, [r2, #0]

	// Enable circular mode
	DMA1_Stream5->CR |= DMA_SCR_CIRC;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c2:	6013      	str	r3, [r2, #0]

	// Set transfer direction for Rx: peripheral to memory
	DMA1_Stream5->CR &= ~(1U << 6);
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ce:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR &= ~(1U << 7);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005da:	6013      	str	r3, [r2, #0]

	// Enable DMA stream
	DMA1_Stream5->CR |= DMA_SCR_EN;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <dma1_stream5_uart_rx_config+0xd8>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]

	// Enable DMA Stream5 interrupt in NVIC
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f7ff fee9 	bl	80003c0 <__NVIC_EnableIRQ>

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40026088 	.word	0x40026088
 80005f8:	40026000 	.word	0x40026000
 80005fc:	40004404 	.word	0x40004404
 8000600:	200000fc 	.word	0x200000fc

08000604 <dma1_stream6_uart_tx_config>:

void dma1_stream6_uart_tx_config(uint32_t msg_to_send, uint32_t msg_len)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	// Disable DMA stream
	DMA1_Stream6->CR &= ~DMA_SCR_EN;
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a32      	ldr	r2, [pc, #200]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000614:	f023 0301 	bic.w	r3, r3, #1
 8000618:	6013      	str	r3, [r2, #0]

	// Wait until DMA is disabled
	while(DMA1_Stream6->CR &= ~DMA_SCR_EN){}
 800061a:	bf00      	nop
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a2e      	ldr	r2, [pc, #184]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000622:	f023 0301 	bic.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f7      	bne.n	800061c <dma1_stream6_uart_tx_config+0x18>

	// Clear interrupt flags for stream 6
	DMA1->HIFCR |= HIFCR_CDMEIF6;
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 8000632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000636:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= HIFCR_CTEIF6;
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 800063e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000642:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= HIFCR_CHTIF6;
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 800064a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064e:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= HIFCR_CTCIF6;
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <dma1_stream6_uart_tx_config+0xdc>)
 8000656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065a:	60d3      	str	r3, [r2, #12]

	// Set peripheral address
	DMA1_Stream6->PAR = (uint32_t)(&(USART2->DR));
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 800065e:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <dma1_stream6_uart_tx_config+0xe0>)
 8000660:	609a      	str	r2, [r3, #8]

	// Set memory address
	DMA1_Stream6->M0AR = msg_to_send;
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	60d3      	str	r3, [r2, #12]

	// Set number of transfers
	DMA1_Stream6->NDTR = msg_len;
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	6053      	str	r3, [r2, #4]

	// Select Channel 4
	DMA1_Stream6->CR &= ~(1U << 25);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000674:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000678:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &= ~(1U << 26);
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000680:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000684:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR |= (1U << 27);
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 800068c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000690:	6013      	str	r3, [r2, #0]

	// Enable memory address increment
	DMA1_Stream6->CR |= DMA_SCR_MINC;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a11      	ldr	r2, [pc, #68]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 8000698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800069c:	6013      	str	r3, [r2, #0]

	// Set transfer direction for Tx: memory to peripheral
	DMA1_Stream6->CR |= (1U << 6);
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	6013      	str	r3, [r2, #0]
	DMA1_Stream6->CR &= ~(1U << 7);
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006b4:	6013      	str	r3, [r2, #0]

	// Set transfer complete interrupt
	DMA1_Stream6->CR |= DMA_SCR_TCIE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	6013      	str	r3, [r2, #0]

	// Enable DMA stream
	DMA1_Stream6->CR |= DMA_SCR_EN;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <dma1_stream6_uart_tx_config+0xd8>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6013      	str	r3, [r2, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	400260a0 	.word	0x400260a0
 80006e0:	40026000 	.word	0x40026000
 80006e4:	40004404 	.word	0x40004404

080006e8 <compute_uart_bd>:


// Function to compute baudrate
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U) )/baudrate);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	085a      	lsrs	r2, r3, #1
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	441a      	add	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000700:	b29b      	uxth	r3, r3
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <uart_set_baudrate>:

// Function to set baudrate register
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 800071a:	6839      	ldr	r1, [r7, #0]
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffe3 	bl	80006e8 <compute_uart_bd>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <uart_set_baudrate+0x24>)
 8000728:	609a      	str	r2, [r3, #8]
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40004400 	.word	0x40004400

08000738 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF6)
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <DMA1_Stream6_IRQHandler+0x2c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000744:	2b00      	cmp	r3, #0
 8000746:	d008      	beq.n	800075a <DMA1_Stream6_IRQHandler+0x22>
	{
		// Do something here ...
		g_tx_cmplt = 1;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <DMA1_Stream6_IRQHandler+0x30>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]

		// clear the flag
		DMA1->HISR |= HIFSR_TCIF6;
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <DMA1_Stream6_IRQHandler+0x2c>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <DMA1_Stream6_IRQHandler+0x2c>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000758:	6053      	str	r3, [r2, #4]
	}

}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40026000 	.word	0x40026000
 8000768:	20000102 	.word	0x20000102

0800076c <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF5)
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <DMA1_Stream5_IRQHandler+0x2c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000778:	2b00      	cmp	r3, #0
 800077a:	d008      	beq.n	800078e <DMA1_Stream5_IRQHandler+0x22>
	{

		g_rx_cmplt = 1;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <DMA1_Stream5_IRQHandler+0x30>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
		// Do something here ...

		// clear the flag
		DMA1->HISR |= HIFSR_TCIF5;
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <DMA1_Stream5_IRQHandler+0x2c>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <DMA1_Stream5_IRQHandler+0x2c>)
 8000788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800078c:	6053      	str	r3, [r2, #4]
	}

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40026000 	.word	0x40026000
 800079c:	20000101 	.word	0x20000101

080007a0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	g_uart_cmplt = 1;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <USART2_IRQHandler+0x20>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]

	// Clear TC Interrupt flag by writing a 0 to the register
	USART2->SR &= ~SR_TC;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <USART2_IRQHandler+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <USART2_IRQHandler+0x24>)
 80007b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007b4:	6013      	str	r3, [r2, #0]

}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	20000103 	.word	0x20000103
 80007c4:	40004400 	.word	0x40004400

080007c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f6:	f000 f817 	bl	8000828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fd61 	bl	80002c0 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   r0, =_estack
 8000800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800080c:	080011d4 	.word	0x080011d4
  ldr r2, =_sbss
 8000810:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000814:	20000114 	.word	0x20000114

08000818 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC_IRQHandler>
	...

0800081c <__errno>:
 800081c:	4b01      	ldr	r3, [pc, #4]	; (8000824 <__errno+0x8>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000

08000828 <__libc_init_array>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4d0d      	ldr	r5, [pc, #52]	; (8000860 <__libc_init_array+0x38>)
 800082c:	4c0d      	ldr	r4, [pc, #52]	; (8000864 <__libc_init_array+0x3c>)
 800082e:	1b64      	subs	r4, r4, r5
 8000830:	10a4      	asrs	r4, r4, #2
 8000832:	2600      	movs	r6, #0
 8000834:	42a6      	cmp	r6, r4
 8000836:	d109      	bne.n	800084c <__libc_init_array+0x24>
 8000838:	4d0b      	ldr	r5, [pc, #44]	; (8000868 <__libc_init_array+0x40>)
 800083a:	4c0c      	ldr	r4, [pc, #48]	; (800086c <__libc_init_array+0x44>)
 800083c:	f000 fc86 	bl	800114c <_init>
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	10a4      	asrs	r4, r4, #2
 8000844:	2600      	movs	r6, #0
 8000846:	42a6      	cmp	r6, r4
 8000848:	d105      	bne.n	8000856 <__libc_init_array+0x2e>
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000850:	4798      	blx	r3
 8000852:	3601      	adds	r6, #1
 8000854:	e7ee      	b.n	8000834 <__libc_init_array+0xc>
 8000856:	f855 3b04 	ldr.w	r3, [r5], #4
 800085a:	4798      	blx	r3
 800085c:	3601      	adds	r6, #1
 800085e:	e7f2      	b.n	8000846 <__libc_init_array+0x1e>
 8000860:	080011cc 	.word	0x080011cc
 8000864:	080011cc 	.word	0x080011cc
 8000868:	080011cc 	.word	0x080011cc
 800086c:	080011d0 	.word	0x080011d0

08000870 <siprintf>:
 8000870:	b40e      	push	{r1, r2, r3}
 8000872:	b500      	push	{lr}
 8000874:	b09c      	sub	sp, #112	; 0x70
 8000876:	ab1d      	add	r3, sp, #116	; 0x74
 8000878:	9002      	str	r0, [sp, #8]
 800087a:	9006      	str	r0, [sp, #24]
 800087c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <siprintf+0x38>)
 8000882:	9107      	str	r1, [sp, #28]
 8000884:	9104      	str	r1, [sp, #16]
 8000886:	4909      	ldr	r1, [pc, #36]	; (80008ac <siprintf+0x3c>)
 8000888:	f853 2b04 	ldr.w	r2, [r3], #4
 800088c:	9105      	str	r1, [sp, #20]
 800088e:	6800      	ldr	r0, [r0, #0]
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	a902      	add	r1, sp, #8
 8000894:	f000 f868 	bl	8000968 <_svfiprintf_r>
 8000898:	9b02      	ldr	r3, [sp, #8]
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	b01c      	add	sp, #112	; 0x70
 80008a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80008a4:	b003      	add	sp, #12
 80008a6:	4770      	bx	lr
 80008a8:	20000000 	.word	0x20000000
 80008ac:	ffff0208 	.word	0xffff0208

080008b0 <__ssputs_r>:
 80008b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b4:	688e      	ldr	r6, [r1, #8]
 80008b6:	429e      	cmp	r6, r3
 80008b8:	4682      	mov	sl, r0
 80008ba:	460c      	mov	r4, r1
 80008bc:	4690      	mov	r8, r2
 80008be:	461f      	mov	r7, r3
 80008c0:	d838      	bhi.n	8000934 <__ssputs_r+0x84>
 80008c2:	898a      	ldrh	r2, [r1, #12]
 80008c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80008c8:	d032      	beq.n	8000930 <__ssputs_r+0x80>
 80008ca:	6825      	ldr	r5, [r4, #0]
 80008cc:	6909      	ldr	r1, [r1, #16]
 80008ce:	eba5 0901 	sub.w	r9, r5, r1
 80008d2:	6965      	ldr	r5, [r4, #20]
 80008d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008dc:	3301      	adds	r3, #1
 80008de:	444b      	add	r3, r9
 80008e0:	106d      	asrs	r5, r5, #1
 80008e2:	429d      	cmp	r5, r3
 80008e4:	bf38      	it	cc
 80008e6:	461d      	movcc	r5, r3
 80008e8:	0553      	lsls	r3, r2, #21
 80008ea:	d531      	bpl.n	8000950 <__ssputs_r+0xa0>
 80008ec:	4629      	mov	r1, r5
 80008ee:	f000 fb63 	bl	8000fb8 <_malloc_r>
 80008f2:	4606      	mov	r6, r0
 80008f4:	b950      	cbnz	r0, 800090c <__ssputs_r+0x5c>
 80008f6:	230c      	movs	r3, #12
 80008f8:	f8ca 3000 	str.w	r3, [sl]
 80008fc:	89a3      	ldrh	r3, [r4, #12]
 80008fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000902:	81a3      	strh	r3, [r4, #12]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090c:	6921      	ldr	r1, [r4, #16]
 800090e:	464a      	mov	r2, r9
 8000910:	f000 fabe 	bl	8000e90 <memcpy>
 8000914:	89a3      	ldrh	r3, [r4, #12]
 8000916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091e:	81a3      	strh	r3, [r4, #12]
 8000920:	6126      	str	r6, [r4, #16]
 8000922:	6165      	str	r5, [r4, #20]
 8000924:	444e      	add	r6, r9
 8000926:	eba5 0509 	sub.w	r5, r5, r9
 800092a:	6026      	str	r6, [r4, #0]
 800092c:	60a5      	str	r5, [r4, #8]
 800092e:	463e      	mov	r6, r7
 8000930:	42be      	cmp	r6, r7
 8000932:	d900      	bls.n	8000936 <__ssputs_r+0x86>
 8000934:	463e      	mov	r6, r7
 8000936:	6820      	ldr	r0, [r4, #0]
 8000938:	4632      	mov	r2, r6
 800093a:	4641      	mov	r1, r8
 800093c:	f000 fab6 	bl	8000eac <memmove>
 8000940:	68a3      	ldr	r3, [r4, #8]
 8000942:	1b9b      	subs	r3, r3, r6
 8000944:	60a3      	str	r3, [r4, #8]
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	4433      	add	r3, r6
 800094a:	6023      	str	r3, [r4, #0]
 800094c:	2000      	movs	r0, #0
 800094e:	e7db      	b.n	8000908 <__ssputs_r+0x58>
 8000950:	462a      	mov	r2, r5
 8000952:	f000 fba5 	bl	80010a0 <_realloc_r>
 8000956:	4606      	mov	r6, r0
 8000958:	2800      	cmp	r0, #0
 800095a:	d1e1      	bne.n	8000920 <__ssputs_r+0x70>
 800095c:	6921      	ldr	r1, [r4, #16]
 800095e:	4650      	mov	r0, sl
 8000960:	f000 fabe 	bl	8000ee0 <_free_r>
 8000964:	e7c7      	b.n	80008f6 <__ssputs_r+0x46>
	...

08000968 <_svfiprintf_r>:
 8000968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800096c:	4698      	mov	r8, r3
 800096e:	898b      	ldrh	r3, [r1, #12]
 8000970:	061b      	lsls	r3, r3, #24
 8000972:	b09d      	sub	sp, #116	; 0x74
 8000974:	4607      	mov	r7, r0
 8000976:	460d      	mov	r5, r1
 8000978:	4614      	mov	r4, r2
 800097a:	d50e      	bpl.n	800099a <_svfiprintf_r+0x32>
 800097c:	690b      	ldr	r3, [r1, #16]
 800097e:	b963      	cbnz	r3, 800099a <_svfiprintf_r+0x32>
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	f000 fb19 	bl	8000fb8 <_malloc_r>
 8000986:	6028      	str	r0, [r5, #0]
 8000988:	6128      	str	r0, [r5, #16]
 800098a:	b920      	cbnz	r0, 8000996 <_svfiprintf_r+0x2e>
 800098c:	230c      	movs	r3, #12
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	e0d1      	b.n	8000b3a <_svfiprintf_r+0x1d2>
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	616b      	str	r3, [r5, #20]
 800099a:	2300      	movs	r3, #0
 800099c:	9309      	str	r3, [sp, #36]	; 0x24
 800099e:	2320      	movs	r3, #32
 80009a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80009a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80009a8:	2330      	movs	r3, #48	; 0x30
 80009aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000b54 <_svfiprintf_r+0x1ec>
 80009ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80009b2:	f04f 0901 	mov.w	r9, #1
 80009b6:	4623      	mov	r3, r4
 80009b8:	469a      	mov	sl, r3
 80009ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009be:	b10a      	cbz	r2, 80009c4 <_svfiprintf_r+0x5c>
 80009c0:	2a25      	cmp	r2, #37	; 0x25
 80009c2:	d1f9      	bne.n	80009b8 <_svfiprintf_r+0x50>
 80009c4:	ebba 0b04 	subs.w	fp, sl, r4
 80009c8:	d00b      	beq.n	80009e2 <_svfiprintf_r+0x7a>
 80009ca:	465b      	mov	r3, fp
 80009cc:	4622      	mov	r2, r4
 80009ce:	4629      	mov	r1, r5
 80009d0:	4638      	mov	r0, r7
 80009d2:	f7ff ff6d 	bl	80008b0 <__ssputs_r>
 80009d6:	3001      	adds	r0, #1
 80009d8:	f000 80aa 	beq.w	8000b30 <_svfiprintf_r+0x1c8>
 80009dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009de:	445a      	add	r2, fp
 80009e0:	9209      	str	r2, [sp, #36]	; 0x24
 80009e2:	f89a 3000 	ldrb.w	r3, [sl]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 80a2 	beq.w	8000b30 <_svfiprintf_r+0x1c8>
 80009ec:	2300      	movs	r3, #0
 80009ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009f6:	f10a 0a01 	add.w	sl, sl, #1
 80009fa:	9304      	str	r3, [sp, #16]
 80009fc:	9307      	str	r3, [sp, #28]
 80009fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a02:	931a      	str	r3, [sp, #104]	; 0x68
 8000a04:	4654      	mov	r4, sl
 8000a06:	2205      	movs	r2, #5
 8000a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a0c:	4851      	ldr	r0, [pc, #324]	; (8000b54 <_svfiprintf_r+0x1ec>)
 8000a0e:	f7ff fc07 	bl	8000220 <memchr>
 8000a12:	9a04      	ldr	r2, [sp, #16]
 8000a14:	b9d8      	cbnz	r0, 8000a4e <_svfiprintf_r+0xe6>
 8000a16:	06d0      	lsls	r0, r2, #27
 8000a18:	bf44      	itt	mi
 8000a1a:	2320      	movmi	r3, #32
 8000a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a20:	0711      	lsls	r1, r2, #28
 8000a22:	bf44      	itt	mi
 8000a24:	232b      	movmi	r3, #43	; 0x2b
 8000a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8000a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8000a30:	d015      	beq.n	8000a5e <_svfiprintf_r+0xf6>
 8000a32:	9a07      	ldr	r2, [sp, #28]
 8000a34:	4654      	mov	r4, sl
 8000a36:	2000      	movs	r0, #0
 8000a38:	f04f 0c0a 	mov.w	ip, #10
 8000a3c:	4621      	mov	r1, r4
 8000a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a42:	3b30      	subs	r3, #48	; 0x30
 8000a44:	2b09      	cmp	r3, #9
 8000a46:	d94e      	bls.n	8000ae6 <_svfiprintf_r+0x17e>
 8000a48:	b1b0      	cbz	r0, 8000a78 <_svfiprintf_r+0x110>
 8000a4a:	9207      	str	r2, [sp, #28]
 8000a4c:	e014      	b.n	8000a78 <_svfiprintf_r+0x110>
 8000a4e:	eba0 0308 	sub.w	r3, r0, r8
 8000a52:	fa09 f303 	lsl.w	r3, r9, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	9304      	str	r3, [sp, #16]
 8000a5a:	46a2      	mov	sl, r4
 8000a5c:	e7d2      	b.n	8000a04 <_svfiprintf_r+0x9c>
 8000a5e:	9b03      	ldr	r3, [sp, #12]
 8000a60:	1d19      	adds	r1, r3, #4
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	9103      	str	r1, [sp, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bfbb      	ittet	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8000a70:	9307      	strge	r3, [sp, #28]
 8000a72:	9307      	strlt	r3, [sp, #28]
 8000a74:	bfb8      	it	lt
 8000a76:	9204      	strlt	r2, [sp, #16]
 8000a78:	7823      	ldrb	r3, [r4, #0]
 8000a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8000a7c:	d10c      	bne.n	8000a98 <_svfiprintf_r+0x130>
 8000a7e:	7863      	ldrb	r3, [r4, #1]
 8000a80:	2b2a      	cmp	r3, #42	; 0x2a
 8000a82:	d135      	bne.n	8000af0 <_svfiprintf_r+0x188>
 8000a84:	9b03      	ldr	r3, [sp, #12]
 8000a86:	1d1a      	adds	r2, r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	9203      	str	r2, [sp, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bfb8      	it	lt
 8000a90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000a94:	3402      	adds	r4, #2
 8000a96:	9305      	str	r3, [sp, #20]
 8000a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000b64 <_svfiprintf_r+0x1fc>
 8000a9c:	7821      	ldrb	r1, [r4, #0]
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	4650      	mov	r0, sl
 8000aa2:	f7ff fbbd 	bl	8000220 <memchr>
 8000aa6:	b140      	cbz	r0, 8000aba <_svfiprintf_r+0x152>
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	eba0 000a 	sub.w	r0, r0, sl
 8000aae:	fa03 f000 	lsl.w	r0, r3, r0
 8000ab2:	9b04      	ldr	r3, [sp, #16]
 8000ab4:	4303      	orrs	r3, r0
 8000ab6:	3401      	adds	r4, #1
 8000ab8:	9304      	str	r3, [sp, #16]
 8000aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000abe:	4826      	ldr	r0, [pc, #152]	; (8000b58 <_svfiprintf_r+0x1f0>)
 8000ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ac4:	2206      	movs	r2, #6
 8000ac6:	f7ff fbab 	bl	8000220 <memchr>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d038      	beq.n	8000b40 <_svfiprintf_r+0x1d8>
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <_svfiprintf_r+0x1f4>)
 8000ad0:	bb1b      	cbnz	r3, 8000b1a <_svfiprintf_r+0x1b2>
 8000ad2:	9b03      	ldr	r3, [sp, #12]
 8000ad4:	3307      	adds	r3, #7
 8000ad6:	f023 0307 	bic.w	r3, r3, #7
 8000ada:	3308      	adds	r3, #8
 8000adc:	9303      	str	r3, [sp, #12]
 8000ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ae0:	4433      	add	r3, r6
 8000ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ae4:	e767      	b.n	80009b6 <_svfiprintf_r+0x4e>
 8000ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000aea:	460c      	mov	r4, r1
 8000aec:	2001      	movs	r0, #1
 8000aee:	e7a5      	b.n	8000a3c <_svfiprintf_r+0xd4>
 8000af0:	2300      	movs	r3, #0
 8000af2:	3401      	adds	r4, #1
 8000af4:	9305      	str	r3, [sp, #20]
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 0c0a 	mov.w	ip, #10
 8000afc:	4620      	mov	r0, r4
 8000afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b02:	3a30      	subs	r2, #48	; 0x30
 8000b04:	2a09      	cmp	r2, #9
 8000b06:	d903      	bls.n	8000b10 <_svfiprintf_r+0x1a8>
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0c5      	beq.n	8000a98 <_svfiprintf_r+0x130>
 8000b0c:	9105      	str	r1, [sp, #20]
 8000b0e:	e7c3      	b.n	8000a98 <_svfiprintf_r+0x130>
 8000b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b14:	4604      	mov	r4, r0
 8000b16:	2301      	movs	r3, #1
 8000b18:	e7f0      	b.n	8000afc <_svfiprintf_r+0x194>
 8000b1a:	ab03      	add	r3, sp, #12
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	462a      	mov	r2, r5
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_svfiprintf_r+0x1f8>)
 8000b22:	a904      	add	r1, sp, #16
 8000b24:	4638      	mov	r0, r7
 8000b26:	f3af 8000 	nop.w
 8000b2a:	1c42      	adds	r2, r0, #1
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	d1d6      	bne.n	8000ade <_svfiprintf_r+0x176>
 8000b30:	89ab      	ldrh	r3, [r5, #12]
 8000b32:	065b      	lsls	r3, r3, #25
 8000b34:	f53f af2c 	bmi.w	8000990 <_svfiprintf_r+0x28>
 8000b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b3a:	b01d      	add	sp, #116	; 0x74
 8000b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b40:	ab03      	add	r3, sp, #12
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	462a      	mov	r2, r5
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_svfiprintf_r+0x1f8>)
 8000b48:	a904      	add	r1, sp, #16
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	f000 f87a 	bl	8000c44 <_printf_i>
 8000b50:	e7eb      	b.n	8000b2a <_svfiprintf_r+0x1c2>
 8000b52:	bf00      	nop
 8000b54:	08001198 	.word	0x08001198
 8000b58:	080011a2 	.word	0x080011a2
 8000b5c:	00000000 	.word	0x00000000
 8000b60:	080008b1 	.word	0x080008b1
 8000b64:	0800119e 	.word	0x0800119e

08000b68 <_printf_common>:
 8000b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b6c:	4616      	mov	r6, r2
 8000b6e:	4699      	mov	r9, r3
 8000b70:	688a      	ldr	r2, [r1, #8]
 8000b72:	690b      	ldr	r3, [r1, #16]
 8000b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	bfb8      	it	lt
 8000b7c:	4613      	movlt	r3, r2
 8000b7e:	6033      	str	r3, [r6, #0]
 8000b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b84:	4607      	mov	r7, r0
 8000b86:	460c      	mov	r4, r1
 8000b88:	b10a      	cbz	r2, 8000b8e <_printf_common+0x26>
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	6033      	str	r3, [r6, #0]
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	0699      	lsls	r1, r3, #26
 8000b92:	bf42      	ittt	mi
 8000b94:	6833      	ldrmi	r3, [r6, #0]
 8000b96:	3302      	addmi	r3, #2
 8000b98:	6033      	strmi	r3, [r6, #0]
 8000b9a:	6825      	ldr	r5, [r4, #0]
 8000b9c:	f015 0506 	ands.w	r5, r5, #6
 8000ba0:	d106      	bne.n	8000bb0 <_printf_common+0x48>
 8000ba2:	f104 0a19 	add.w	sl, r4, #25
 8000ba6:	68e3      	ldr	r3, [r4, #12]
 8000ba8:	6832      	ldr	r2, [r6, #0]
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	42ab      	cmp	r3, r5
 8000bae:	dc26      	bgt.n	8000bfe <_printf_common+0x96>
 8000bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000bb4:	1e13      	subs	r3, r2, #0
 8000bb6:	6822      	ldr	r2, [r4, #0]
 8000bb8:	bf18      	it	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	0692      	lsls	r2, r2, #26
 8000bbe:	d42b      	bmi.n	8000c18 <_printf_common+0xb0>
 8000bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bc4:	4649      	mov	r1, r9
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	47c0      	blx	r8
 8000bca:	3001      	adds	r0, #1
 8000bcc:	d01e      	beq.n	8000c0c <_printf_common+0xa4>
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	68e5      	ldr	r5, [r4, #12]
 8000bd2:	6832      	ldr	r2, [r6, #0]
 8000bd4:	f003 0306 	and.w	r3, r3, #6
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	bf08      	it	eq
 8000bdc:	1aad      	subeq	r5, r5, r2
 8000bde:	68a3      	ldr	r3, [r4, #8]
 8000be0:	6922      	ldr	r2, [r4, #16]
 8000be2:	bf0c      	ite	eq
 8000be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000be8:	2500      	movne	r5, #0
 8000bea:	4293      	cmp	r3, r2
 8000bec:	bfc4      	itt	gt
 8000bee:	1a9b      	subgt	r3, r3, r2
 8000bf0:	18ed      	addgt	r5, r5, r3
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	341a      	adds	r4, #26
 8000bf6:	42b5      	cmp	r5, r6
 8000bf8:	d11a      	bne.n	8000c30 <_printf_common+0xc8>
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e008      	b.n	8000c10 <_printf_common+0xa8>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	4652      	mov	r2, sl
 8000c02:	4649      	mov	r1, r9
 8000c04:	4638      	mov	r0, r7
 8000c06:	47c0      	blx	r8
 8000c08:	3001      	adds	r0, #1
 8000c0a:	d103      	bne.n	8000c14 <_printf_common+0xac>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c14:	3501      	adds	r5, #1
 8000c16:	e7c6      	b.n	8000ba6 <_printf_common+0x3e>
 8000c18:	18e1      	adds	r1, r4, r3
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	2030      	movs	r0, #48	; 0x30
 8000c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c22:	4422      	add	r2, r4
 8000c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	e7c7      	b.n	8000bc0 <_printf_common+0x58>
 8000c30:	2301      	movs	r3, #1
 8000c32:	4622      	mov	r2, r4
 8000c34:	4649      	mov	r1, r9
 8000c36:	4638      	mov	r0, r7
 8000c38:	47c0      	blx	r8
 8000c3a:	3001      	adds	r0, #1
 8000c3c:	d0e6      	beq.n	8000c0c <_printf_common+0xa4>
 8000c3e:	3601      	adds	r6, #1
 8000c40:	e7d9      	b.n	8000bf6 <_printf_common+0x8e>
	...

08000c44 <_printf_i>:
 8000c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c48:	7e0f      	ldrb	r7, [r1, #24]
 8000c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c4c:	2f78      	cmp	r7, #120	; 0x78
 8000c4e:	4691      	mov	r9, r2
 8000c50:	4680      	mov	r8, r0
 8000c52:	460c      	mov	r4, r1
 8000c54:	469a      	mov	sl, r3
 8000c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c5a:	d807      	bhi.n	8000c6c <_printf_i+0x28>
 8000c5c:	2f62      	cmp	r7, #98	; 0x62
 8000c5e:	d80a      	bhi.n	8000c76 <_printf_i+0x32>
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	f000 80d8 	beq.w	8000e16 <_printf_i+0x1d2>
 8000c66:	2f58      	cmp	r7, #88	; 0x58
 8000c68:	f000 80a3 	beq.w	8000db2 <_printf_i+0x16e>
 8000c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c74:	e03a      	b.n	8000cec <_printf_i+0xa8>
 8000c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c7a:	2b15      	cmp	r3, #21
 8000c7c:	d8f6      	bhi.n	8000c6c <_printf_i+0x28>
 8000c7e:	a101      	add	r1, pc, #4	; (adr r1, 8000c84 <_printf_i+0x40>)
 8000c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c84:	08000cdd 	.word	0x08000cdd
 8000c88:	08000cf1 	.word	0x08000cf1
 8000c8c:	08000c6d 	.word	0x08000c6d
 8000c90:	08000c6d 	.word	0x08000c6d
 8000c94:	08000c6d 	.word	0x08000c6d
 8000c98:	08000c6d 	.word	0x08000c6d
 8000c9c:	08000cf1 	.word	0x08000cf1
 8000ca0:	08000c6d 	.word	0x08000c6d
 8000ca4:	08000c6d 	.word	0x08000c6d
 8000ca8:	08000c6d 	.word	0x08000c6d
 8000cac:	08000c6d 	.word	0x08000c6d
 8000cb0:	08000dfd 	.word	0x08000dfd
 8000cb4:	08000d21 	.word	0x08000d21
 8000cb8:	08000ddf 	.word	0x08000ddf
 8000cbc:	08000c6d 	.word	0x08000c6d
 8000cc0:	08000c6d 	.word	0x08000c6d
 8000cc4:	08000e1f 	.word	0x08000e1f
 8000cc8:	08000c6d 	.word	0x08000c6d
 8000ccc:	08000d21 	.word	0x08000d21
 8000cd0:	08000c6d 	.word	0x08000c6d
 8000cd4:	08000c6d 	.word	0x08000c6d
 8000cd8:	08000de7 	.word	0x08000de7
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	602a      	str	r2, [r5, #0]
 8000ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0a3      	b.n	8000e38 <_printf_i+0x1f4>
 8000cf0:	6820      	ldr	r0, [r4, #0]
 8000cf2:	6829      	ldr	r1, [r5, #0]
 8000cf4:	0606      	lsls	r6, r0, #24
 8000cf6:	f101 0304 	add.w	r3, r1, #4
 8000cfa:	d50a      	bpl.n	8000d12 <_printf_i+0xce>
 8000cfc:	680e      	ldr	r6, [r1, #0]
 8000cfe:	602b      	str	r3, [r5, #0]
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	da03      	bge.n	8000d0c <_printf_i+0xc8>
 8000d04:	232d      	movs	r3, #45	; 0x2d
 8000d06:	4276      	negs	r6, r6
 8000d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d0c:	485e      	ldr	r0, [pc, #376]	; (8000e88 <_printf_i+0x244>)
 8000d0e:	230a      	movs	r3, #10
 8000d10:	e019      	b.n	8000d46 <_printf_i+0x102>
 8000d12:	680e      	ldr	r6, [r1, #0]
 8000d14:	602b      	str	r3, [r5, #0]
 8000d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d1a:	bf18      	it	ne
 8000d1c:	b236      	sxthne	r6, r6
 8000d1e:	e7ef      	b.n	8000d00 <_printf_i+0xbc>
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	1d19      	adds	r1, r3, #4
 8000d26:	6029      	str	r1, [r5, #0]
 8000d28:	0601      	lsls	r1, r0, #24
 8000d2a:	d501      	bpl.n	8000d30 <_printf_i+0xec>
 8000d2c:	681e      	ldr	r6, [r3, #0]
 8000d2e:	e002      	b.n	8000d36 <_printf_i+0xf2>
 8000d30:	0646      	lsls	r6, r0, #25
 8000d32:	d5fb      	bpl.n	8000d2c <_printf_i+0xe8>
 8000d34:	881e      	ldrh	r6, [r3, #0]
 8000d36:	4854      	ldr	r0, [pc, #336]	; (8000e88 <_printf_i+0x244>)
 8000d38:	2f6f      	cmp	r7, #111	; 0x6f
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2308      	moveq	r3, #8
 8000d3e:	230a      	movne	r3, #10
 8000d40:	2100      	movs	r1, #0
 8000d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d46:	6865      	ldr	r5, [r4, #4]
 8000d48:	60a5      	str	r5, [r4, #8]
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	bfa2      	ittt	ge
 8000d4e:	6821      	ldrge	r1, [r4, #0]
 8000d50:	f021 0104 	bicge.w	r1, r1, #4
 8000d54:	6021      	strge	r1, [r4, #0]
 8000d56:	b90e      	cbnz	r6, 8000d5c <_printf_i+0x118>
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d04d      	beq.n	8000df8 <_printf_i+0x1b4>
 8000d5c:	4615      	mov	r5, r2
 8000d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d62:	fb03 6711 	mls	r7, r3, r1, r6
 8000d66:	5dc7      	ldrb	r7, [r0, r7]
 8000d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d6c:	4637      	mov	r7, r6
 8000d6e:	42bb      	cmp	r3, r7
 8000d70:	460e      	mov	r6, r1
 8000d72:	d9f4      	bls.n	8000d5e <_printf_i+0x11a>
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d10b      	bne.n	8000d90 <_printf_i+0x14c>
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	07de      	lsls	r6, r3, #31
 8000d7c:	d508      	bpl.n	8000d90 <_printf_i+0x14c>
 8000d7e:	6923      	ldr	r3, [r4, #16]
 8000d80:	6861      	ldr	r1, [r4, #4]
 8000d82:	4299      	cmp	r1, r3
 8000d84:	bfde      	ittt	le
 8000d86:	2330      	movle	r3, #48	; 0x30
 8000d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000d90:	1b52      	subs	r2, r2, r5
 8000d92:	6122      	str	r2, [r4, #16]
 8000d94:	f8cd a000 	str.w	sl, [sp]
 8000d98:	464b      	mov	r3, r9
 8000d9a:	aa03      	add	r2, sp, #12
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	4640      	mov	r0, r8
 8000da0:	f7ff fee2 	bl	8000b68 <_printf_common>
 8000da4:	3001      	adds	r0, #1
 8000da6:	d14c      	bne.n	8000e42 <_printf_i+0x1fe>
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	b004      	add	sp, #16
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	4835      	ldr	r0, [pc, #212]	; (8000e88 <_printf_i+0x244>)
 8000db4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000db8:	6829      	ldr	r1, [r5, #0]
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8000dc0:	6029      	str	r1, [r5, #0]
 8000dc2:	061d      	lsls	r5, r3, #24
 8000dc4:	d514      	bpl.n	8000df0 <_printf_i+0x1ac>
 8000dc6:	07df      	lsls	r7, r3, #31
 8000dc8:	bf44      	itt	mi
 8000dca:	f043 0320 	orrmi.w	r3, r3, #32
 8000dce:	6023      	strmi	r3, [r4, #0]
 8000dd0:	b91e      	cbnz	r6, 8000dda <_printf_i+0x196>
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	f023 0320 	bic.w	r3, r3, #32
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	2310      	movs	r3, #16
 8000ddc:	e7b0      	b.n	8000d40 <_printf_i+0xfc>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	2378      	movs	r3, #120	; 0x78
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <_printf_i+0x248>)
 8000dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000dee:	e7e3      	b.n	8000db8 <_printf_i+0x174>
 8000df0:	0659      	lsls	r1, r3, #25
 8000df2:	bf48      	it	mi
 8000df4:	b2b6      	uxthmi	r6, r6
 8000df6:	e7e6      	b.n	8000dc6 <_printf_i+0x182>
 8000df8:	4615      	mov	r5, r2
 8000dfa:	e7bb      	b.n	8000d74 <_printf_i+0x130>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	6826      	ldr	r6, [r4, #0]
 8000e00:	6961      	ldr	r1, [r4, #20]
 8000e02:	1d18      	adds	r0, r3, #4
 8000e04:	6028      	str	r0, [r5, #0]
 8000e06:	0635      	lsls	r5, r6, #24
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	d501      	bpl.n	8000e10 <_printf_i+0x1cc>
 8000e0c:	6019      	str	r1, [r3, #0]
 8000e0e:	e002      	b.n	8000e16 <_printf_i+0x1d2>
 8000e10:	0670      	lsls	r0, r6, #25
 8000e12:	d5fb      	bpl.n	8000e0c <_printf_i+0x1c8>
 8000e14:	8019      	strh	r1, [r3, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	6123      	str	r3, [r4, #16]
 8000e1a:	4615      	mov	r5, r2
 8000e1c:	e7ba      	b.n	8000d94 <_printf_i+0x150>
 8000e1e:	682b      	ldr	r3, [r5, #0]
 8000e20:	1d1a      	adds	r2, r3, #4
 8000e22:	602a      	str	r2, [r5, #0]
 8000e24:	681d      	ldr	r5, [r3, #0]
 8000e26:	6862      	ldr	r2, [r4, #4]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f7ff f9f8 	bl	8000220 <memchr>
 8000e30:	b108      	cbz	r0, 8000e36 <_printf_i+0x1f2>
 8000e32:	1b40      	subs	r0, r0, r5
 8000e34:	6060      	str	r0, [r4, #4]
 8000e36:	6863      	ldr	r3, [r4, #4]
 8000e38:	6123      	str	r3, [r4, #16]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e40:	e7a8      	b.n	8000d94 <_printf_i+0x150>
 8000e42:	6923      	ldr	r3, [r4, #16]
 8000e44:	462a      	mov	r2, r5
 8000e46:	4649      	mov	r1, r9
 8000e48:	4640      	mov	r0, r8
 8000e4a:	47d0      	blx	sl
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d0ab      	beq.n	8000da8 <_printf_i+0x164>
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	079b      	lsls	r3, r3, #30
 8000e54:	d413      	bmi.n	8000e7e <_printf_i+0x23a>
 8000e56:	68e0      	ldr	r0, [r4, #12]
 8000e58:	9b03      	ldr	r3, [sp, #12]
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	bfb8      	it	lt
 8000e5e:	4618      	movlt	r0, r3
 8000e60:	e7a4      	b.n	8000dac <_printf_i+0x168>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4632      	mov	r2, r6
 8000e66:	4649      	mov	r1, r9
 8000e68:	4640      	mov	r0, r8
 8000e6a:	47d0      	blx	sl
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d09b      	beq.n	8000da8 <_printf_i+0x164>
 8000e70:	3501      	adds	r5, #1
 8000e72:	68e3      	ldr	r3, [r4, #12]
 8000e74:	9903      	ldr	r1, [sp, #12]
 8000e76:	1a5b      	subs	r3, r3, r1
 8000e78:	42ab      	cmp	r3, r5
 8000e7a:	dcf2      	bgt.n	8000e62 <_printf_i+0x21e>
 8000e7c:	e7eb      	b.n	8000e56 <_printf_i+0x212>
 8000e7e:	2500      	movs	r5, #0
 8000e80:	f104 0619 	add.w	r6, r4, #25
 8000e84:	e7f5      	b.n	8000e72 <_printf_i+0x22e>
 8000e86:	bf00      	nop
 8000e88:	080011a9 	.word	0x080011a9
 8000e8c:	080011ba 	.word	0x080011ba

08000e90 <memcpy>:
 8000e90:	440a      	add	r2, r1
 8000e92:	4291      	cmp	r1, r2
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d100      	bne.n	8000e9c <memcpy+0xc>
 8000e9a:	4770      	bx	lr
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d1f9      	bne.n	8000e9e <memcpy+0xe>
 8000eaa:	bd10      	pop	{r4, pc}

08000eac <memmove>:
 8000eac:	4288      	cmp	r0, r1
 8000eae:	b510      	push	{r4, lr}
 8000eb0:	eb01 0402 	add.w	r4, r1, r2
 8000eb4:	d902      	bls.n	8000ebc <memmove+0x10>
 8000eb6:	4284      	cmp	r4, r0
 8000eb8:	4623      	mov	r3, r4
 8000eba:	d807      	bhi.n	8000ecc <memmove+0x20>
 8000ebc:	1e43      	subs	r3, r0, #1
 8000ebe:	42a1      	cmp	r1, r4
 8000ec0:	d008      	beq.n	8000ed4 <memmove+0x28>
 8000ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000eca:	e7f8      	b.n	8000ebe <memmove+0x12>
 8000ecc:	4402      	add	r2, r0
 8000ece:	4601      	mov	r1, r0
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	d100      	bne.n	8000ed6 <memmove+0x2a>
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ede:	e7f7      	b.n	8000ed0 <memmove+0x24>

08000ee0 <_free_r>:
 8000ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d044      	beq.n	8000f70 <_free_r+0x90>
 8000ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eea:	9001      	str	r0, [sp, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f1a1 0404 	sub.w	r4, r1, #4
 8000ef2:	bfb8      	it	lt
 8000ef4:	18e4      	addlt	r4, r4, r3
 8000ef6:	f000 f913 	bl	8001120 <__malloc_lock>
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <_free_r+0x94>)
 8000efc:	9801      	ldr	r0, [sp, #4]
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	b933      	cbnz	r3, 8000f10 <_free_r+0x30>
 8000f02:	6063      	str	r3, [r4, #4]
 8000f04:	6014      	str	r4, [r2, #0]
 8000f06:	b003      	add	sp, #12
 8000f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f0c:	f000 b90e 	b.w	800112c <__malloc_unlock>
 8000f10:	42a3      	cmp	r3, r4
 8000f12:	d908      	bls.n	8000f26 <_free_r+0x46>
 8000f14:	6825      	ldr	r5, [r4, #0]
 8000f16:	1961      	adds	r1, r4, r5
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	bf01      	itttt	eq
 8000f1c:	6819      	ldreq	r1, [r3, #0]
 8000f1e:	685b      	ldreq	r3, [r3, #4]
 8000f20:	1949      	addeq	r1, r1, r5
 8000f22:	6021      	streq	r1, [r4, #0]
 8000f24:	e7ed      	b.n	8000f02 <_free_r+0x22>
 8000f26:	461a      	mov	r2, r3
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	b10b      	cbz	r3, 8000f30 <_free_r+0x50>
 8000f2c:	42a3      	cmp	r3, r4
 8000f2e:	d9fa      	bls.n	8000f26 <_free_r+0x46>
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	1855      	adds	r5, r2, r1
 8000f34:	42a5      	cmp	r5, r4
 8000f36:	d10b      	bne.n	8000f50 <_free_r+0x70>
 8000f38:	6824      	ldr	r4, [r4, #0]
 8000f3a:	4421      	add	r1, r4
 8000f3c:	1854      	adds	r4, r2, r1
 8000f3e:	42a3      	cmp	r3, r4
 8000f40:	6011      	str	r1, [r2, #0]
 8000f42:	d1e0      	bne.n	8000f06 <_free_r+0x26>
 8000f44:	681c      	ldr	r4, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	6053      	str	r3, [r2, #4]
 8000f4a:	4421      	add	r1, r4
 8000f4c:	6011      	str	r1, [r2, #0]
 8000f4e:	e7da      	b.n	8000f06 <_free_r+0x26>
 8000f50:	d902      	bls.n	8000f58 <_free_r+0x78>
 8000f52:	230c      	movs	r3, #12
 8000f54:	6003      	str	r3, [r0, #0]
 8000f56:	e7d6      	b.n	8000f06 <_free_r+0x26>
 8000f58:	6825      	ldr	r5, [r4, #0]
 8000f5a:	1961      	adds	r1, r4, r5
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf04      	itt	eq
 8000f60:	6819      	ldreq	r1, [r3, #0]
 8000f62:	685b      	ldreq	r3, [r3, #4]
 8000f64:	6063      	str	r3, [r4, #4]
 8000f66:	bf04      	itt	eq
 8000f68:	1949      	addeq	r1, r1, r5
 8000f6a:	6021      	streq	r1, [r4, #0]
 8000f6c:	6054      	str	r4, [r2, #4]
 8000f6e:	e7ca      	b.n	8000f06 <_free_r+0x26>
 8000f70:	b003      	add	sp, #12
 8000f72:	bd30      	pop	{r4, r5, pc}
 8000f74:	20000104 	.word	0x20000104

08000f78 <sbrk_aligned>:
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	4e0e      	ldr	r6, [pc, #56]	; (8000fb4 <sbrk_aligned+0x3c>)
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	6831      	ldr	r1, [r6, #0]
 8000f80:	4605      	mov	r5, r0
 8000f82:	b911      	cbnz	r1, 8000f8a <sbrk_aligned+0x12>
 8000f84:	f000 f8bc 	bl	8001100 <_sbrk_r>
 8000f88:	6030      	str	r0, [r6, #0]
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f000 f8b7 	bl	8001100 <_sbrk_r>
 8000f92:	1c43      	adds	r3, r0, #1
 8000f94:	d00a      	beq.n	8000fac <sbrk_aligned+0x34>
 8000f96:	1cc4      	adds	r4, r0, #3
 8000f98:	f024 0403 	bic.w	r4, r4, #3
 8000f9c:	42a0      	cmp	r0, r4
 8000f9e:	d007      	beq.n	8000fb0 <sbrk_aligned+0x38>
 8000fa0:	1a21      	subs	r1, r4, r0
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	f000 f8ac 	bl	8001100 <_sbrk_r>
 8000fa8:	3001      	adds	r0, #1
 8000faa:	d101      	bne.n	8000fb0 <sbrk_aligned+0x38>
 8000fac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	20000108 	.word	0x20000108

08000fb8 <_malloc_r>:
 8000fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbc:	1ccd      	adds	r5, r1, #3
 8000fbe:	f025 0503 	bic.w	r5, r5, #3
 8000fc2:	3508      	adds	r5, #8
 8000fc4:	2d0c      	cmp	r5, #12
 8000fc6:	bf38      	it	cc
 8000fc8:	250c      	movcc	r5, #12
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	4607      	mov	r7, r0
 8000fce:	db01      	blt.n	8000fd4 <_malloc_r+0x1c>
 8000fd0:	42a9      	cmp	r1, r5
 8000fd2:	d905      	bls.n	8000fe0 <_malloc_r+0x28>
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	2600      	movs	r6, #0
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fe0:	4e2e      	ldr	r6, [pc, #184]	; (800109c <_malloc_r+0xe4>)
 8000fe2:	f000 f89d 	bl	8001120 <__malloc_lock>
 8000fe6:	6833      	ldr	r3, [r6, #0]
 8000fe8:	461c      	mov	r4, r3
 8000fea:	bb34      	cbnz	r4, 800103a <_malloc_r+0x82>
 8000fec:	4629      	mov	r1, r5
 8000fee:	4638      	mov	r0, r7
 8000ff0:	f7ff ffc2 	bl	8000f78 <sbrk_aligned>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	d14d      	bne.n	8001096 <_malloc_r+0xde>
 8000ffa:	6834      	ldr	r4, [r6, #0]
 8000ffc:	4626      	mov	r6, r4
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	d140      	bne.n	8001084 <_malloc_r+0xcc>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	4631      	mov	r1, r6
 8001006:	4638      	mov	r0, r7
 8001008:	eb04 0803 	add.w	r8, r4, r3
 800100c:	f000 f878 	bl	8001100 <_sbrk_r>
 8001010:	4580      	cmp	r8, r0
 8001012:	d13a      	bne.n	800108a <_malloc_r+0xd2>
 8001014:	6821      	ldr	r1, [r4, #0]
 8001016:	3503      	adds	r5, #3
 8001018:	1a6d      	subs	r5, r5, r1
 800101a:	f025 0503 	bic.w	r5, r5, #3
 800101e:	3508      	adds	r5, #8
 8001020:	2d0c      	cmp	r5, #12
 8001022:	bf38      	it	cc
 8001024:	250c      	movcc	r5, #12
 8001026:	4629      	mov	r1, r5
 8001028:	4638      	mov	r0, r7
 800102a:	f7ff ffa5 	bl	8000f78 <sbrk_aligned>
 800102e:	3001      	adds	r0, #1
 8001030:	d02b      	beq.n	800108a <_malloc_r+0xd2>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	442b      	add	r3, r5
 8001036:	6023      	str	r3, [r4, #0]
 8001038:	e00e      	b.n	8001058 <_malloc_r+0xa0>
 800103a:	6822      	ldr	r2, [r4, #0]
 800103c:	1b52      	subs	r2, r2, r5
 800103e:	d41e      	bmi.n	800107e <_malloc_r+0xc6>
 8001040:	2a0b      	cmp	r2, #11
 8001042:	d916      	bls.n	8001072 <_malloc_r+0xba>
 8001044:	1961      	adds	r1, r4, r5
 8001046:	42a3      	cmp	r3, r4
 8001048:	6025      	str	r5, [r4, #0]
 800104a:	bf18      	it	ne
 800104c:	6059      	strne	r1, [r3, #4]
 800104e:	6863      	ldr	r3, [r4, #4]
 8001050:	bf08      	it	eq
 8001052:	6031      	streq	r1, [r6, #0]
 8001054:	5162      	str	r2, [r4, r5]
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	4638      	mov	r0, r7
 800105a:	f104 060b 	add.w	r6, r4, #11
 800105e:	f000 f865 	bl	800112c <__malloc_unlock>
 8001062:	f026 0607 	bic.w	r6, r6, #7
 8001066:	1d23      	adds	r3, r4, #4
 8001068:	1af2      	subs	r2, r6, r3
 800106a:	d0b6      	beq.n	8000fda <_malloc_r+0x22>
 800106c:	1b9b      	subs	r3, r3, r6
 800106e:	50a3      	str	r3, [r4, r2]
 8001070:	e7b3      	b.n	8000fda <_malloc_r+0x22>
 8001072:	6862      	ldr	r2, [r4, #4]
 8001074:	42a3      	cmp	r3, r4
 8001076:	bf0c      	ite	eq
 8001078:	6032      	streq	r2, [r6, #0]
 800107a:	605a      	strne	r2, [r3, #4]
 800107c:	e7ec      	b.n	8001058 <_malloc_r+0xa0>
 800107e:	4623      	mov	r3, r4
 8001080:	6864      	ldr	r4, [r4, #4]
 8001082:	e7b2      	b.n	8000fea <_malloc_r+0x32>
 8001084:	4634      	mov	r4, r6
 8001086:	6876      	ldr	r6, [r6, #4]
 8001088:	e7b9      	b.n	8000ffe <_malloc_r+0x46>
 800108a:	230c      	movs	r3, #12
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4638      	mov	r0, r7
 8001090:	f000 f84c 	bl	800112c <__malloc_unlock>
 8001094:	e7a1      	b.n	8000fda <_malloc_r+0x22>
 8001096:	6025      	str	r5, [r4, #0]
 8001098:	e7de      	b.n	8001058 <_malloc_r+0xa0>
 800109a:	bf00      	nop
 800109c:	20000104 	.word	0x20000104

080010a0 <_realloc_r>:
 80010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	4680      	mov	r8, r0
 80010a6:	4614      	mov	r4, r2
 80010a8:	460e      	mov	r6, r1
 80010aa:	b921      	cbnz	r1, 80010b6 <_realloc_r+0x16>
 80010ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b0:	4611      	mov	r1, r2
 80010b2:	f7ff bf81 	b.w	8000fb8 <_malloc_r>
 80010b6:	b92a      	cbnz	r2, 80010c4 <_realloc_r+0x24>
 80010b8:	f7ff ff12 	bl	8000ee0 <_free_r>
 80010bc:	4625      	mov	r5, r4
 80010be:	4628      	mov	r0, r5
 80010c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c4:	f000 f838 	bl	8001138 <_malloc_usable_size_r>
 80010c8:	4284      	cmp	r4, r0
 80010ca:	4607      	mov	r7, r0
 80010cc:	d802      	bhi.n	80010d4 <_realloc_r+0x34>
 80010ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80010d2:	d812      	bhi.n	80010fa <_realloc_r+0x5a>
 80010d4:	4621      	mov	r1, r4
 80010d6:	4640      	mov	r0, r8
 80010d8:	f7ff ff6e 	bl	8000fb8 <_malloc_r>
 80010dc:	4605      	mov	r5, r0
 80010de:	2800      	cmp	r0, #0
 80010e0:	d0ed      	beq.n	80010be <_realloc_r+0x1e>
 80010e2:	42bc      	cmp	r4, r7
 80010e4:	4622      	mov	r2, r4
 80010e6:	4631      	mov	r1, r6
 80010e8:	bf28      	it	cs
 80010ea:	463a      	movcs	r2, r7
 80010ec:	f7ff fed0 	bl	8000e90 <memcpy>
 80010f0:	4631      	mov	r1, r6
 80010f2:	4640      	mov	r0, r8
 80010f4:	f7ff fef4 	bl	8000ee0 <_free_r>
 80010f8:	e7e1      	b.n	80010be <_realloc_r+0x1e>
 80010fa:	4635      	mov	r5, r6
 80010fc:	e7df      	b.n	80010be <_realloc_r+0x1e>
	...

08001100 <_sbrk_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4d06      	ldr	r5, [pc, #24]	; (800111c <_sbrk_r+0x1c>)
 8001104:	2300      	movs	r3, #0
 8001106:	4604      	mov	r4, r0
 8001108:	4608      	mov	r0, r1
 800110a:	602b      	str	r3, [r5, #0]
 800110c:	f7ff f922 	bl	8000354 <_sbrk>
 8001110:	1c43      	adds	r3, r0, #1
 8001112:	d102      	bne.n	800111a <_sbrk_r+0x1a>
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	b103      	cbz	r3, 800111a <_sbrk_r+0x1a>
 8001118:	6023      	str	r3, [r4, #0]
 800111a:	bd38      	pop	{r3, r4, r5, pc}
 800111c:	2000010c 	.word	0x2000010c

08001120 <__malloc_lock>:
 8001120:	4801      	ldr	r0, [pc, #4]	; (8001128 <__malloc_lock+0x8>)
 8001122:	f000 b811 	b.w	8001148 <__retarget_lock_acquire_recursive>
 8001126:	bf00      	nop
 8001128:	20000110 	.word	0x20000110

0800112c <__malloc_unlock>:
 800112c:	4801      	ldr	r0, [pc, #4]	; (8001134 <__malloc_unlock+0x8>)
 800112e:	f000 b80c 	b.w	800114a <__retarget_lock_release_recursive>
 8001132:	bf00      	nop
 8001134:	20000110 	.word	0x20000110

08001138 <_malloc_usable_size_r>:
 8001138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800113c:	1f18      	subs	r0, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfbc      	itt	lt
 8001142:	580b      	ldrlt	r3, [r1, r0]
 8001144:	18c0      	addlt	r0, r0, r3
 8001146:	4770      	bx	lr

08001148 <__retarget_lock_acquire_recursive>:
 8001148:	4770      	bx	lr

0800114a <__retarget_lock_release_recursive>:
 800114a:	4770      	bx	lr

0800114c <_init>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	bf00      	nop
 8001150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001152:	bc08      	pop	{r3}
 8001154:	469e      	mov	lr, r3
 8001156:	4770      	bx	lr

08001158 <_fini>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	bf00      	nop
 800115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115e:	bc08      	pop	{r3}
 8001160:	469e      	mov	lr, r3
 8001162:	4770      	bx	lr
